import tensorflow as tf
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D
import pickle

#Pickle - serialize machine learning algorithm and save serialize format

#pickle.dump - converting python object into a character stream

#rb - open for read mode and binary mode

#wb -open for write mode and binary mode

#dense layer - used to change dimention of the vector

#dropout - ignores neurons

#activation function - mathematical gate in input 

#Flatten - converts feature map to single column to connected layer and dense adds the fully connected layer to neural network

#Numpy - array proccessing pacakge

#Conv2d - 2D convolutional layer create a kernal help to produce tensor outputs

#maxpooling2d - maps region of image to a feature map

X = pickle.load(open("X.pickle","rb"))
y = pickle.load(open("y.pickle","rb"))

X = X/255.0

model = Sequential()
model.add(Conv2D(64, (3,3), input_shape = X.shape[1:]))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(64, (3,3)))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(64))

model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss="binary_crossentropy",
              optimizer="adam",
              metrics=['accuracy'])

y = np.array(y)
print(X.shape, X.dtype)
print(y.shape, y.dtype)
model.fit(X, y, batch_size=32, epochs=100, validation_split=0.1)
